using System;
using System.Collections.Generic;
using Model;
using Repository;

namespace Services
{
    /// <summary>
    /// A service that is responsible for managing market orders and storing them to a persistent repository.
    /// </summary>
    public interface IMarketOrderService
    {
        /// <summary>
        /// Creates a new market order and adds it to a repository
        /// </summary>
        /// <param name="filledPrice">The agreed price per one piece of the traded asset</param>
        /// <param name="fee">Fee for trade</param>
        /// <param name="size">Size of the trade</param>
        /// <param name="date">Date the trade was made</param>
        /// <param name="buy">A flag indicating whether the trade is a buy</param>
        /// <param name="portfolioEntryId">ID of the portfolio entry the trade belongs to</param>
        /// <returns>Created instance of the `MarketOrder` class</returns>
        MarketOrder CreateMarketOrder(decimal filledPrice, decimal fee, decimal size,
            DateTime date, bool buy, int portfolioEntryId);

        /// <summary>
        /// Deletes the given order from the repository
        /// </summary>
        /// <param name="order">Order to be deleted from the repository</param>
        /// <returns>A flag indicating whether an order was deleted</returns>
        bool DeleteMarketOrder(MarketOrder order);

        /// <summary>
        /// Updates the given order in the repository. The order with the same ID in the repository is replaced with the one
        /// passed.
        /// </summary>
        /// <param name="order">Updated order</param>
        /// <returns>A flag indicating whether an order was updated</returns>
        bool UpdateMarketOrder(MarketOrder order);

        /// <summary>
        /// Loads and returns a market order from a repository
        /// </summary>
        /// <param name="id">ID of the order to be loaded</param>
        /// <returns>Loaded order from the repository or `null` when no order with the given ID was found in the repository</returns>
        MarketOrder GetMarketOrder(int id);

        /// <summary>
        /// Gets all orders of a portfolio entry given by an ID.
        /// </summary>
        /// <param name="portfolioEntryId">ID of the entry whose orders are to be found</param>
        /// <returns>List of all orders belonging to the order specified by the given ID</returns>
        List<MarketOrder> GetPortfolioEntryOrders(int portfolioEntryId);

        /// <summary>
        /// Deletes all orders belonging to the portfolio entry given by it's ID
        /// </summary>
        /// <param name="portfolioEntryId">ID of the portfolio entry whose orders are to be deleted</param>
        /// <returns>Number of deleted orders</returns>
        int DeletePortfolioEntryOrders(int portfolioEntryId);
    }

    public class MarketOrderServiceImpl : IMarketOrderService
    {
        private readonly IMarketOrderRepository _marketOrderRepository;

        public MarketOrderServiceImpl(IMarketOrderRepository marketOrderRepository)
        {
            _marketOrderRepository = marketOrderRepository;
        }

        public MarketOrder CreateMarketOrder(decimal filledPrice, decimal fee, decimal size, DateTime date, bool buy,
            int portfolioEntryId)
        {
            // create a MarketOrder instance
            var order = new MarketOrder(filledPrice, fee, size, date, buy, PortfolioEntryId: portfolioEntryId);
            
            // add it to the repository
            var id = _marketOrderRepository.Add(order);
            
            // return the created instance with the ID generated by the repository
            return order with {Id = id};
        }

        public bool DeleteMarketOrder(MarketOrder order) => _marketOrderRepository.Delete(order);

        public bool UpdateMarketOrder(MarketOrder order) => _marketOrderRepository.Update(order);

        public MarketOrder GetMarketOrder(int id) => _marketOrderRepository.Get(id);

        public List<MarketOrder> GetPortfolioEntryOrders(int portfolioEntryId) =>
            _marketOrderRepository.GetAllByPortfolioEntryId(portfolioEntryId);

        public int DeletePortfolioEntryOrders(int portfolioEntryId) =>
            _marketOrderRepository.DeletePortfolioEntryOrders(portfolioEntryId);
    }
}