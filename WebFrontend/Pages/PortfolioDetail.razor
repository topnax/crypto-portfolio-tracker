@page "/portfolios/{portfolioId:int}"
@using Model
@using Services
@using Utils
@using CryptoStatsSource
@using CryptoStatsSource.model
@using System.Diagnostics
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IPortfolioService PortfolioService
@inject IPortfolioEntryService PortfolioEntryService
@inject IMarketOrderService MarketOrderService;
@inject ICryptoStatsSource CryptoStatsSource;
@inject ISummaryService SummaryService;
@inject ICryptoNameResolver CryptoNameResolver;

<style>
    .demo-mat-card {
        margin-bottom: 2em;
    }

    .demo-mat-card-content {
        padding: 1rem;
    }

    .clear-margin {
        margin: 0px;
    }
    
    .app-fab--absolute {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
    }
    
</style>
<div class="mat-layout-grid mat-layout-grid-align-center">
    <div class="mat-layout-grid-inner center">

        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3"></div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
            @if (activePortfolio != null)
            {
                <MatCard class="demo-mat-card">
                    <MatCardContent>
                        <div class="demo-mat-card-content">
                            <MatHeadline6 class="clear-margin">
                                <MatChipSet Style="align-items: center">
                                    <MatH5 Class="clear-margin">@activePortfolio.Name</MatH5>
                                    <MatChip Style="vertical-align: center" Label="@CurrencyUtils.GetCurrencyLabel(activePortfolio.Currency)"/>
                                </MatChipSet>
                            </MatHeadline6>
                        </div>

                        <MatBody2 class="demo-mat-card-content clear-margin">
                            <div class="mat-layout-grid">
                                <div class="mat-layout-grid-inner" style="align-items: center">
                                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                                        <MatH4 Class="clear-margin">@(CurrencyUtils.Format(portfolioSummary.MarketValue, activePortfolio.Currency))</MatH4>
                                    </div>
                                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6" style="text-align: end">
                                        @(portfolioSummary.RelativeChange * 100m) %
                                    </div>
                                </div>
                            </div>
                        </MatBody2>
                    </MatCardContent>
                </MatCard>
                <MatTable Items="@portfolioEntryRows" Striped="true" AllowSelection="true" RowClass="tester" class="mat-elevation-z5" ShowPaging="false" PageSize="9999" SelectionChanged="SelectionChangedEvent">
                    <MatTableHeader>
                        <th>Coin</th>
                        <th>Price</th>
                        <th>Change (1h)</th>
                        <th>Holdings</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.symbol.ToUpper()</td>
                        <td>@(CurrencyUtils.Format(context.currentPrice, activePortfolio.Currency))</td>
                        <td style='color: @(context.relativeChange >= 0 ? "#17a104" : "#FF0000")'>@context.relativeChange%</td>
                        <td>@context.percentage%</td>
                    </MatTableRow>
                </MatTable>
            }
            else
            {
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3"></div>
    </div>
</div>
<MatFAB Class="app-fab--absolute" Icon="@MatIconNames.Add" Label="Add a new entry" OnClick='() => { NavigationManager.NavigateTo($"newportfolioentry/{activePortfolio.Id}"); }'></MatFAB>


@code
{
    [Parameter]
    public int PortfolioId { get; set; }

    protected Portfolio activePortfolio;

    protected ISummaryService.Summary portfolioSummary = new(1341m, 1.8m, 9982.489m, 1000m);

    protected List<PortfolioEntry> activePortfolioEntries = new List<PortfolioEntry>()
    {
        new("btc", 1, 1),
        new("ada", 1, 2),
        new("eth", 1, 3),
        new("ltc", 1, 4),
        new("link", 1, 5),
    };

    protected List<decimal> portfolioHoldings = new()
    {
        44.8886m,
        28.18m,
        10.116m,
        9.38m,
        2.70m,
    };

    protected List<PortfolioEntryRow> portfolioEntryRows = new()
    {
        new("btc", 57644.42m, 1.35m, 44.76m),
        new("ada", 1.36m, 0.58m, 28.18m),
        new("eth", 3279.64m, 10.95m, 27.11m),
        new("ltc", 291.55m, 7.20m, 9.38m),
        new("link", 42.20m, -5.19m, 2.70m)
    };

    protected record PortfolioEntryRow(string symbol, decimal currentPrice, decimal relativeChange, decimal percentage);

    protected override void OnInitialized()
    {
        activePortfolio = PortfolioService.GetPortfolio(PortfolioId);
        activePortfolioEntries = PortfolioEntryService.GetPortfolioEntries(PortfolioId);
    }

    protected override async Task OnInitializedAsync()
    {
        var marketEntries = (await CryptoStatsSource.GetMarketEntries(
            CurrencyUtils.GetCurrencyLabel(activePortfolio.Currency).ToLower(),
            await Task.WhenAll(activePortfolioEntries.Select(async entry => (await CryptoNameResolver.Resolve(entry.Symbol)).ToLower()))
            )).ToDictionary(entry => entry.Symbol, entry => entry);


        List<ISummaryService.Summary> summaries = new List<ISummaryService.Summary>();
        foreach (var portfolioEntry in activePortfolioEntries)
        {
            var marketEntry = marketEntries.GetValueOrDefault(portfolioEntry.Symbol);

            if (marketEntry == null)
            {
    // TODO market entry is null
            }
            var entryOrders = MarketOrderService.GetPortfolioEntryOrders(portfolioEntry.Id);
            summaries.Add(SummaryService.GetPortfolioEntrySummary(entryOrders, marketEntry.CurrentPrice));
        }
        portfolioSummary = SummaryService.GetPortfolioSummary(summaries);

        if (portfolioSummary.Cost == 0)
        {
            portfolioSummary = portfolioSummary with{
                RelativeChange = 0
                };
        }

        var totalMarketValue = summaries.Sum(summary => summary.MarketValue);


        portfolioEntryRows = summaries.Zip(activePortfolioEntries).Select((summary) => new PortfolioEntryRow(summary.Second.Symbol, marketEntries[summary.Second.Symbol].CurrentPrice, new decimal(marketEntries[summary.Second.Symbol].PriceChangePercentage24H), totalMarketValue > 0 ? (summary.First.MarketValue / totalMarketValue) * 100 : 0)).ToList();
    }

    public void SelectionChangedEvent(object row)
    {
        if (row == null)
        {
        }
        else
        {
            NavigationManager.NavigateTo($"entrydetail");
        }
    }

}