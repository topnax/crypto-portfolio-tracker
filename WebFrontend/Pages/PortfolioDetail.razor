@page "/portfolios/{portfolioId:int}"
@using Model
@using Services
@using Utils
@using CryptoStatsSource
@using CryptoStatsSource.model
@using System.Diagnostics
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IPortfolioService PortfolioService
@inject IPortfolioEntryService PortfolioEntryService
@inject IMarketOrderService MarketOrderService;
@inject ICryptoStatsSource CryptoStatsSource;
@inject ISummaryService SummaryService;
@inject ICryptocurrencyResolver CryptocurrencyResolver;

<style>
    .demo-mat-card {
        margin-bottom: 2em;
    }

    .demo-mat-card-content {
        padding: 1rem;
    }

    .clear-margin {
        margin: 0px;
    }
    
    .app-fab--absolute {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
    }
    
    .mat-paper {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 1em;
    } 
</style>
<div class="mat-layout-grid mat-layout-grid-align-center">
    <div class="mat-layout-grid-inner center">

        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2"></div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
            <MatH5><MatButton Outlined="true" Icon="keyboard_arrow_left" Style="margin-right: 1rem;" OnClick='() => { NavigationManager.NavigateTo($""); }'>Back</MatButton>Portfolio Detail</MatH5>
            @if (ActivePortfolio != null)
            {
                <MatCard class="demo-mat-card">
                    <MatCardContent>
                        <div class="demo-mat-card-content">
                            <MatHeadline6 class="clear-margin">
                                <MatChipSet Style="align-items: center">
                                    <MatH5 Class="clear-margin">@ActivePortfolio.Name</MatH5>
                                    <MatChip Style="vertical-align: center" Label="@CurrencyUtils.GetCurrencyLabel(ActivePortfolio.Currency)"/>
                                </MatChipSet>
                            </MatHeadline6>
                            <span style="padding-left: 4px;">@ActivePortfolio.Description</span>
                        </div>
                        <MatBody2 class="demo-mat-card-content clear-margin">
                            <div class="mat-layout-grid">
                                <div class="mat-layout-grid-inner" style="align-items: center">
                                    @if (PortfolioSummary != null)
                                    {
                                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                                            <LabelDecimalValue Label="Market Value" Value="@(CurrencyUtils.Format(PortfolioSummary.MarketValue, ActivePortfolio.Currency))"></LabelDecimalValue>
                                        </div>
                                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6" style="text-align: end">
                                            <LabelDecimalValue Positive="PortfolioSummary.RelativeChange >= 0" ValueColorBasedOnValue="true" Label="Total Change" Value="@(DecimalUtils.FormatTwoDecimalPlacesWithPlusSign(PortfolioSummary.RelativeChange * 100m) + "%")"></LabelDecimalValue>
                                        </div>
                                    }
                                    else
                                    {
                                        <MatProgressCircle Indeterminate="true"></MatProgressCircle>
                                    }
                                </div>
                            </div>
                        </MatBody2>
                    </MatCardContent>
                </MatCard>

                @if (PortfolioEntryRows == null)
                {
                    <MatProgressBar Indeterminate="true"></MatProgressBar>
                }
                else if (PortfolioEntryRows.Count > 0)
                {
                    <MatTable Items="@PortfolioEntryRows" Striped="true" AllowSelection="true" RowClass="tester" class="mat-elevation-z5" ShowPaging="false" PageSize="9999" SelectionChanged="SelectionChangedEvent">
                        <MatTableHeader>
                            <th>Coin</th>
                            <th>Price</th>
                            <th>Price change (1h)</th>
                            <th>Holdings</th>
                        </MatTableHeader>
                        <MatTableRow>
                            <td>@context.Symbol.ToUpper()</td>
                            <td>
                                <div style="min-width: 8rem">@(CurrencyUtils.Format(context.CurrentPrice, ActivePortfolio.Currency))</div>
                            </td>
                            <td style='color: @(context.RelativeChange >= 0 ? "#17a104" : "#FF0000"); min-width: 7rem;'>
                                <div style="min-width: 6rem">@DecimalUtils.FormatTwoDecimalPlaces(context.RelativeChange)%</div>
                            </td>
                            <td>@(CurrencyUtils.Format(context.MarketValue, ActivePortfolio.Currency)) (@(DecimalUtils.FormatTwoDecimalPlaces(context.Percentage))%)</td>
                        </MatTableRow>
                    </MatTable>
                }
                else
                {
                    <MatPaper Elevation="2"><span>No portfolio entries were found.</span><div><MatButton Style="margin-top:1em;" Label="Create a new portfolio entry" OnClick='() => { NavigationManager.NavigateTo($"newportfolioentry/{ActivePortfolio.Id}");}'></MatButton></div></MatPaper>
                }
            }
            else
            {
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2"></div>
    </div>
</div>
<MatFAB Class="app-fab--absolute" Icon="@MatIconNames.Settings" Label="Manage portfolio entries" OnClick='() => { NavigationManager.NavigateTo($"newportfolioentry/{ActivePortfolio.Id}"); }'></MatFAB>


@code
{
    [Parameter]
    public int PortfolioId { get; set; }

    protected Portfolio ActivePortfolio;

    protected ISummaryService.Summary PortfolioSummary = null;

    protected List<PortfolioEntry> ActivePortfolioEntries;

    protected List<PortfolioEntryRow> PortfolioEntryRows;

    protected record PortfolioEntryRow(string Symbol, decimal CurrentPrice, decimal RelativeChange, decimal Percentage, decimal AbsoluteChange, decimal MarketValue, int EntryId);

    protected override void OnInitialized()
    {
        ActivePortfolio = PortfolioService.GetPortfolio(PortfolioId);
        ActivePortfolioEntries = PortfolioEntryService.GetPortfolioEntries(PortfolioId);
        _loadEntryInfo();
    }


    private async void _loadEntryInfo()
    {
        // resolve names of all portfolio entries 
        await CryptocurrencyResolver.Refresh();
        var portfolioCryptocurrencyEntries = await Task.WhenAll(
            ActivePortfolioEntries.Select(
                async entry => (await CryptocurrencyResolver.Resolve(entry.Symbol)))
            );

        // fetch market entries of all entries of the portfolio 
        var marketEntries = await CryptoStatsSource.GetMarketEntries(
            CurrencyUtils.GetCurrencyLabel(ActivePortfolio.Currency).ToLower(), portfolioCryptocurrencyEntries.Select(c => c.Id).ToArray()
            );

        // create a dictionary where a symbol is mapped to a market entry
        var symbolsToMarketEntries = marketEntries.ToDictionary(entry => entry.Symbol, entry => entry);

        // TODO fix low low low market cap non existing altcoins 
        // compute portfolio entry summaries 
        var entrySummaries = ActivePortfolioEntries.Select(
            portfolioEntry =>
            {
                // find the evaluation of the entry's asset
                var marketEntry = symbolsToMarketEntries.GetValueOrDefault(portfolioEntry.Symbol);

                if (marketEntry == null)
                {
                    // TODO market entry is null
                }
                
                // fetch all orders of the currently iterated portfolio entry
                var entryMarketOrders = MarketOrderService.GetPortfolioEntryOrders(portfolioEntry.Id);
                
                // compute the summary of the entry based on market orders
                return SummaryService.GetPortfolioEntrySummary(entryMarketOrders, marketEntry.CurrentPrice);
            }
            ).ToList();

        // compute portfolio's summary based on summaries of it's entries
        PortfolioSummary = SummaryService.GetPortfolioSummary(entrySummaries);

        // if the cost of the summary is zero, set the relative change to zero
        if (PortfolioSummary.Cost == 0)
        {
            PortfolioSummary = PortfolioSummary with {
                RelativeChange = 0
           };
        }

        // compute the total value of the portfolio by summing market values of all entries
        var portfolioTotalMarketValue = entrySummaries.Sum(summary => summary.MarketValue);

        // create portfolio entry table rows
        PortfolioEntryRows = entrySummaries.Zip(ActivePortfolioEntries).Select(
            tuple => new PortfolioEntryRow(
                // symbol of the portfolio entry
                tuple.Second.Symbol,
                // current price of the entry's asset 
                symbolsToMarketEntries[tuple.Second.Symbol].CurrentPrice,
                // asset's price change since the last 24h 
                new decimal(symbolsToMarketEntries[tuple.Second.Symbol].PriceChangePercentage24H ?? 0),
                // percentage within the portfolio entry
                portfolioTotalMarketValue > 0 ? (tuple.First.MarketValue / portfolioTotalMarketValue) * 100 : 0,
                // absolute change within the portfolio entry
                tuple.First.AbsoluteChange,
                // market value
                tuple.First.MarketValue,
                // pass the entry id
                tuple.Second.Id
                )
            ).ToList();
        
        StateHasChanged();
    }

    public void SelectionChangedEvent(object row)
    {
        if (row != null)
        {
            NavigationManager.NavigateTo($"entries/{((PortfolioEntryRow) row).EntryId}");
        }
    }

}