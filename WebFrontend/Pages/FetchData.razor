@page "/fetchdata"

@using ServerSideBlazor.Data
@using CryptoStatsSource.model
@using CryptoStatsSource
@inject WeatherForecastService ForecastService
@inject ICryptoStatsSource CryptoStatsService;

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}
else
{
    <MatTable Items="@forecasts" class="mat-elevation-z5">
        <MatTableHeader>
            <th>Date</th>
            <th>Temp.&nbsp;(C)</th>
            <th>Temp.&nbsp;(F)</th>
            <th>Summary</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Date.ToShortDateString()</td>
            <td>@context.TemperatureC</td>
            <td>@context.TemperatureF</td>
            <td>@context.Summary</td>
        </MatTableRow>
    </MatTable>
}

@if (entries == null)
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}
else
{
    <MatTable Items="@entries" class="mat-elevation-z5">
        <MatTableHeader>
            <th>Symbol</th>
            <th>Name</th>
            <th>Current Price ($)</th>
            <th>Market Cap ($)</th>
            <th>Price Change Last 24h ($)</th>
            <th>Price Change Last 24h (%)</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Symbol</td>
            <td>@context.Name</td>
            <td>@context.CurrentPrice</td>
            <td>@context.MarketCap</td>
            <td>@context.PriceChange24H</td>
            <td><span style="@(context.PriceChangePercentage24H < 0 ? "color:red": "")">@context.PriceChangePercentage24H</span></td>
        </MatTableRow>
    </MatTable>
}

@code {
    WeatherForecast[] forecasts;
    MarketEntry[] entries;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        entries = (await CryptoStatsService.GetMarketEntries("usd", "bitcoin", "litecoin", "cardano")).ToArray();

    }
}
