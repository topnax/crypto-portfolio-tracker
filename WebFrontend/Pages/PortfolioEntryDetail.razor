@page "/entries/{entryId:int}"
@using Model
@using Services
@using Utils
@using CryptoStatsSource
@using CryptoStatsSource.model
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IMatDialogService MatDialogService
@inject IPortfolioService PortfolioService
@inject IPortfolioEntryService PortfolioEntryService
@inject IMarketOrderService MarketOrderService
@inject ICryptoNameResolver CryptoNameResolver
@inject ICryptoStatsSource CryptoStatsSource
@inject ISummaryService SummaryService

<style>
    .demo-mat-card {
        margin-bottom: 2em;
    }

    .demo-mat-card-content {
        padding: 1rem;
    }

    .clear-margin {
        margin: 0px;
    }
    
    .clear-margin-vertical {
        margin-top: 0px;
        margin-bottom: 0px;
    }    
    .app-fab--absolute {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
    }
    
</style>
<div class="mat-layout-grid mat-layout-grid-align-center">
    <div class="mat-layout-grid-inner center">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2"></div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
            <MatButton Outlined="true" Icon="keyboard_arrow_left" Style="margin-bottom: 1rem;" OnClick='() => { NavigationManager.NavigateTo($"/portfolios/{ActivePortfolio.Id}"); }'>Back</MatButton>
            <MatCard class="demo-mat-card">
                <MatCardContent>
                    @if(ActivePortfolioEntry != null)
                    {
                        <div class="demo-mat-card-content">
                            <MatHeadline6 class="clear-margin">
                                <MatChipSet Style="align-items: center">
                                    @if (portfolioEntryName != null)
                                    {
                                        <MatH5 Class="clear-margin-vertical">@portfolioEntryName</MatH5>
                                    }
                                    else
                                    {
                                        <MatProgressCircle Indeterminate="true"/>
                                    }
                                    <MatChip Style="vertical-align: center" Label="@(CurrencyUtils.GetCurrencyLabel(ActivePortfolio.Currency))"/>
                                    @if (CurrentEntryAssetMarketEntry != null)
                                    {
                                        <MatH6 Class="clear-margin-vertical" Style="text-align: end;float: end;">1 @ActivePortfolioEntry.Symbol.ToUpper() = @CurrencyUtils.Format(CurrentEntryAssetMarketEntry.CurrentPrice, ActivePortfolio.Currency)</MatH6>
                                    }
                                    else
                                    {
                                        <MatProgressCircle Indeterminate="true"></MatProgressCircle>
                                    }
                                </MatChipSet>
                            </MatHeadline6>
                        </div>

                        <MatBody2 class="demo-mat-card-content clear-margin">
                            <div class="mat-layout-grid">
                                <div class="mat-layout-grid-inner" style="align-items: center">
                                    @if (entrySummary != null)
                                    {
                                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                                            <MatH4 Class="clear-margin">@(CurrencyUtils.Format(entrySummary.MarketValue, ActivePortfolio.Currency))</MatH4>
                                        </div>
                                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6" style="text-align: end">
                                            @(entrySummary.RelativeChange * 100m) %
                                        </div>
                                    }
                                    else
                                    {
                                        <MatProgressCircle Indeterminate="true"/>
                                    }
                                </div>
                            </div>
                        </MatBody2>
                    }
                    else
                    {
                        <MatProgressBar Indeterminate="true"/>
                    }
                </MatCardContent>
            </MatCard>
            @if (tableRowsItems == null)
            {
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
            else if (tableRowsItems.Count == 0)
            {
                <MatH6>No entries found...</MatH6> 
            }
            else
            {
                                <MatTable Items="@tableRowsItems" Striped="true" AllowSelection="true" RowClass="tester" class="mat-elevation-z5" ShowPaging="false" PageSize="9999">
                                    <MatTableHeader>
                                        <th>Date</th>
                                        <th>Size</th>
                                        <th>Market Value</th>
                                        <th>Change</th>
                                        <th>Cost</th>
                                        <th>Fee</th>
                                        <th>Actions</th>
                                    </MatTableHeader>
                                    <MatTableRow>
                                        <td>
                                            <div style="min-width: 9rem">@(String.Format("{0:d.M.yyyy HH:mm:ss}", context.Item1.Date))</div>
                                        </td>
                                        <td>
                                            <div style="min-width: 9rem">@context.Item1.Size @ActivePortfolioEntry.Symbol.ToUpper()</div>
                                        </td>
                                        <td>@CurrencyUtils.Format(context.Item2.MarketValue, ActivePortfolio.Currency)</td>
                                        <td style='color: @(context.Item2.RelativeChange >= 0 ? "#17a104" : "#FF0000")'>
                                            <div style="min-width: 9rem">@CurrencyUtils.Format(context.Item2.AbsoluteChange, ActivePortfolio.Currency) (@(context.Item2.RelativeChange * 100)%)</div>
                                        </td>
                                        <td>@CurrencyUtils.Format(context.Item2.Cost, ActivePortfolio.Currency)</td>
                                        <td>@CurrencyUtils.Format(context.Item1.Fee, ActivePortfolio.Currency)</td>
                                        <td>
                                            <MatIconButton Icon="edit" OnClick="EditMarketOrder"></MatIconButton>
                                            <MatIconButton Icon="delete" OnClick="() => DeletePortfolio(context.Item1)"></MatIconButton>
                                        </td>
                                    </MatTableRow>
                                </MatTable>
            }
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2"></div>
    </div>
</div>
<MatFAB Class="app-fab--absolute" Icon="@MatIconNames.Add" Label="Add a new order" OnClick='() => { NavigationManager.NavigateTo($"newmarketorder/{ActivePortfolioEntry.Id}");}'></MatFAB>


@code
{
    [Parameter]
    public int EntryId { get; set; }
    
    protected Portfolio ActivePortfolio;
    protected PortfolioEntry ActivePortfolioEntry; 
    protected MarketEntry CurrentEntryAssetMarketEntry; 
    protected string portfolioEntryName = "Bitcoin";
    protected ISummaryService.Summary entrySummary = new(523m, 0.719m, 1268.89m, 745.58m);

    protected List<Tuple<MarketOrder, ISummaryService.Summary>> tableRowsItems = new()
    {
        new Tuple<MarketOrder, ISummaryService.Summary>(new(18300m, 0.1m, 0.003266m, DateTime.Now.AddMonths(-6), false), new(120m, 2m, 183.00m, 60m)),
        new Tuple<MarketOrder, ISummaryService.Summary>(new(21200, 0.3m, 0.002866m, DateTime.Now.AddDays(91), false), new(101m, 2m, 123.00m, 45m)),
        new Tuple<MarketOrder, ISummaryService.Summary>(new(18300m, 0.1m, 0.003266m, DateTime.Now.AddMonths(-6), false), new(180m - 30m, 2.3m, 113.00m, 23m)),
        new Tuple<MarketOrder, ISummaryService.Summary>(new(18300m, 0.1m, 0.003266m, DateTime.Now.AddMonths(-6), false), new(-60m, -0.6m, 40.00m, 100m)),
    };


    protected override void OnInitialized()
    {
        // get the portfolio entry
        ActivePortfolioEntry = PortfolioEntryService.GetPortfolioEntry(EntryId);
        
        // get the entry's portfolio
        ActivePortfolio = PortfolioService.GetPortfolio(ActivePortfolioEntry.PortfolioId);
    }

    protected override async Task OnInitializedAsync()
    {
        // resolve the name of the cryptocurrency (using the symbol)
         portfolioEntryName = await CryptoNameResolver.Resolve(ActivePortfolioEntry.Symbol);

        await UpdateEntrySummary();
    }

    private void SetEntryLoading()
    {
        CurrentEntryAssetMarketEntry = null;
        tableRowsItems = null;
        entrySummary = null;
        StateHasChanged();
    }

    private async Task UpdateEntrySummary()
    {
        
        // fetch the price of the entry's asset
        // TODO null?
        CurrentEntryAssetMarketEntry = (await CryptoStatsSource.GetMarketEntries(
            CurrencyUtils.GetCurrencyLabel(ActivePortfolio.Currency).ToLower(),
            portfolioEntryName.ToLower()
            ))[0];

        // get all orders of the portfolio entry
        var entryOrders = MarketOrderService.GetPortfolioEntryOrders(ActivePortfolioEntry.Id);

        // compute summaries of all orders in the entry
        var entrySummaries = entryOrders.Select(order =>
            SummaryService.GetMarketOrderSummary(order, CurrentEntryAssetMarketEntry.CurrentPrice));

        // zip entry orders and summaries into a table rows
        tableRowsItems = entryOrders.Zip(entrySummaries)
            .Select(tuple => new Tuple<MarketOrder, ISummaryService.Summary>(tuple.First, tuple.Second)).ToList();

        // compute suummary of this entry
        entrySummary = SummaryService.GetPortfolioEntrySummary(entryOrders, CurrentEntryAssetMarketEntry.CurrentPrice);
    }

    public void EditMarketOrder(MouseEventArgs e)
    {
        NavigationManager.NavigateTo($"editorder");
    }

    async void DeletePortfolio(MarketOrder order)
    {
        var result = await MatDialogService.ConfirmAsync("Do you really wish to delete this market order?");
        if (result)
        {
            MarketOrderService.DeleteMarketOrder(order);
            SetEntryLoading();
            await UpdateEntrySummary();
            StateHasChanged();
        }
    }
}