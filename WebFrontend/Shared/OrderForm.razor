@using Utils
@using System.ComponentModel.DataAnnotations
@using Model
<EditForm Model="FormModel" OnValidSubmit="OnFormSubmitted">
    <DataAnnotationsValidator/>
    <p>
        <MatTextField FullWidth="true" Label="@("Price per coin (" + CurrencyUtils.GetCurrencyLabel(Currency) + ")")"
                      @bind-Value=@FormModel.FilledPrice>
        </MatTextField>
        <ValidationMessage For="@(() => FormModel.FilledPrice)"/>
    </p>

    <p>
        <MatTextField FullWidth="true" Label="@("Traded size (" + Symbol.ToUpper() + ")")"
                      @bind-Value=@FormModel.Size>
        </MatTextField>
        <ValidationMessage For="@(() => FormModel.Size)"/>
    </p>

    <p>
        <MatTextField FullWidth="true" Label="@("Fee (" + CurrencyUtils.GetCurrencyLabel(Currency) + ")")"
                      @bind-Value=@FormModel.Fee>
        </MatTextField>
        <ValidationMessage For="@(() => FormModel.Fee)"/>
    </p>

    <p>
        <br>
        <b>Order date</b>
    </p>
    <p>
        <MatDatePicker FullWidth="true" @bind-Value="@FormModel.OrderDate" Enable24hours="true" Required="true" Format="MM.dd.yy H:mm:ss" EnableTime="true"></MatDatePicker>
        <ValidationMessage For="@(() => FormModel.OrderDate)"/>
    </p>
    <p>
        <MatCheckbox @bind-Value="@FormModel.SellOrder" Label="Sell Order"></MatCheckbox>
    </p>
    <MatCardActions>
        <MatCardActionButtons>
            <MatButton Type="submit">
                @if (Edit)
                {
                    <span>Save</span>
                }
                else
                {
                    <span>Create</span>
                }
            </MatButton>
        </MatCardActionButtons>

        <MatCardActionIcons>
            <MatIconButton Icon="@MatIconNames.Refresh" OnClick="(_) => FormModel.Reset()"></MatIconButton>
        </MatCardActionIcons>
    </MatCardActions>
</EditForm>

@code {
    // model of the form
    [Parameter]
    public OrderFormModel FormModel { get; set; } = new ();
    
    // callback when the form is submitted
    [Parameter] public EventCallback<OrderFormModel> OnSubmitEventHandler { get; set; }

    // currency of the transaction 
    [Parameter] public Currency Currency { get; set; }
    
    // traded cryptocurrency symbol
    [Parameter] public string Symbol { get; set; }
    
    // flag indicating whether the order should be created or an existing one should be edited
    [Parameter] public bool Edit { get; set; }
    
    
    public class OrderFormModel
    {
        // transaction filled price
        [Required]
        [CustomValidation(typeof(OrderFormModel), nameof(NonZeroValue))]
        public decimal FilledPrice { get; set; }

        // size of the transaction
        [Required]
        [CustomValidation(typeof(OrderFormModel), nameof(NonZeroValue))]
        public decimal Size { get; set; }

        // fee for the transaction 
        [Required]
        [CustomValidation(typeof(OrderFormModel), nameof(NonNegativeValue))]
        public decimal Fee { get; set; }

        // date at which the transaction was performed
        [Required] public DateTime OrderDate = DateTime.Now;
        
        // a flag indicating whether the transaction was a sell
        [Required] public bool SellOrder;

        public void Reset()
        {
            FilledPrice = 0m;
            Size = 0m;
            Fee = 0m;
            OrderDate = DateTime.Now;
            SellOrder = false;
        }

        public static ValidationResult NonZeroValue(decimal value, ValidationContext vc)
        {
            return value > 0
                ? ValidationResult.Success
                : new ValidationResult("Value must be non-zero", new[] {vc.MemberName});
        }

        public static ValidationResult NonNegativeValue(decimal value, ValidationContext vc)
        {
            return value >= 0
                ? ValidationResult.Success
                : new ValidationResult("Value must be positive", new[] {vc.MemberName});
        }
    }
    
    private async void OnFormSubmitted()
    {
        await OnSubmitEventHandler.InvokeAsync(FormModel);
        FormModel.Reset();
    }
}